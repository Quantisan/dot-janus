buildscript {
    repositories {
        flatDir { dirs project(':').file('lib/build') }
    }
    dependencies {
        classpath "clojuresque:clojuresque:1.5.2"
        classpath "local-dotgradle:local-dotgradle:1.0.0"
    }
}

allprojects {
    repositories {
        flatDir { dirs project(':').file('lib/build') }
    }

    ext.localDotGradle = project(':').file("local.gradle").absoluteFile
    apply plugin: 'local-dotgradle'
}

subprojects {
    apply plugin: 'java-base'

    group = 'vimclojure'
    version = '2.4.0-SNAPSHOT'

    defaultTasks 'build'
}

/*
apply plugin: 'clojure'

defaultRepositories {
    clojarsRepo()
}

task genCompletions(type: clojuresque.ClojureExec) {
    classpath = project.files(
        project(':server').sourceSets.main.clojure.srcDirs,
        project(':server').sourceSets.main.output.classesDir,
        project(':server').sourceSets.main.compileClasspath
    )
    main = "vimclojure.gencompletions/main"
    args = [
        "clojure.core",
        "clojure.data",
        "clojure.inspector",
        "clojure.java.browse",
        "clojure.java.browse-ui",
        "clojure.java.io",
        "clojure.java.javadoc",
        "clojure.java.shell",
        "clojure.main",
        "clojure.pprint",
        "clojure.repl",
        "clojure.set",
        "clojure.stacktrace",
        "clojure.string",
        "clojure.template",
        "clojure.test",
        "clojure.test.tap",
        "clojure.test.junit",
        "clojure.walk",
        "clojure.xml",
        "clojure.zip"
    ]
}


task runNailgun(type: JavaExec) {
    main = "vimclojure.nailgun.NGServer"
    args = [ "127.0.0.1" ]
    dependsOn project(':nailgun-connector').classes
    dependsOn project(':nailgun-connector').processResources
    classpath = project.files(
        project(':server').sourceSets.main.clojure.srcDirs,
        project(':nailgun-connector').sourceSets.main.clojure.srcDirs,
        project(':nailgun-connector').sourceSets.main.output.classesDir,
        project(':nailgun-connector').sourceSets.main.output.resourcesDir,
        project(':nailgun-connector').sourceSets.main.compileClasspath
    )
}

task runRepl(type: clojuresque.ClojureExec) {
    main = "clojure.tools.nrepl.cmdline/-main"
    args = [ "--port", "12345" ]
    dependsOn project(':server').classes
    dependsOn project(':server').processResources
    classpath = project.files(
        project(':server').sourceSets.main.clojure.srcDirs,
        project(':server').sourceSets.main.output.classesDir,
        project(':server').sourceSets.main.output.resourcesDir,
        project(':server').sourceSets.main.compileClasspath
    )
}
*/
